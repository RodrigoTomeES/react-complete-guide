{"version":3,"sources":["components/Cockpit/Cockpit.module.css","containers/App.module.css","components/Persons/Person/Person.module.css","components/ErrorBoundary/ErrorBoundary.js","hoc/withClass.js","hoc/Auxiliary.js","context/auth-context.js","components/Persons/Person/Person.js","components/Persons/Persons.js","components/Cockpit/Cockpit.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","ErrorBoundary","state","hasError","errorMessage","componentDidCatch","error","info","setState","returnContent","this","props","children","Component","withClass","WrappedComponent","className","aux","authContext","React","createContext","authenticated","login","Person","inputElementRef","createRef","current","focus","console","log","context","onClick","clicked","name","age","type","onChange","changed","value","ref","contextType","AuthContext","classes","Persons","prevProps","prevState","message","snapshot","persons","map","person","index","key","id","event","PureComponent","memo","toggleBtnRef","useRef","useContext","useEffect","click","buttonStyle","Button","showPersons","push","Red","classesAssigned","personsLength","red","bold","title","join","toggled","otherProperty","showCockpit","changeCounter","deletePersonHander","indexPerson","splice","changedNameHandler","personIndex","findIndex","p","target","togglePersonsHandler","loginHandler","nextProps","nextState","AppHeader","Provider","appTitle","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.612c794e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"Cockpit_red__3GSoJ\",\"bold\":\"Cockpit_bold__3urf2\",\"Button\":\"Cockpit_Button__3aZcj\",\"Red\":\"Cockpit_Red__2ee36\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1IQbR\",\"AppLogo\":\"App_AppLogo__3Yi7f\",\"AppHeader\":\"App_AppHeader__2IzuF\",\"AppLink\":\"App_AppLink__18Yfv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__2_l3Y\"};","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    state = {\n        hasError: false,\n        errorMessage: '',\n    }\n\n    componentDidCatch = (error, info) => {\n        this.setState({\n            hasError: true, \n            errorMessage: error,\n        });\n    }\n\n    render() {\n        let returnContent = this.props.children;\n\n        if (this.state.hasError) {\n            returnContent = <h1>{}</h1>;\n        }\n        \n        return returnContent;\n    }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\n\n// Component HOC\n// const withClass = props => (\n//     <div className={props.classes}>\n//         {props.children}\n//     </div>\n// );\n\n// Normal function (HOC)\nconst withClass = (WrappedComponent, className) => {\n    return props => (\n        <div className={className}>\n            <WrappedComponent {...props} />\n        </div>\n    );\n}\n\nexport default withClass;\n","// This is the same like React.Fragment\n\nconst aux = props => props.children;\n\nexport default aux;\n","import React from 'react';\n\nconst authContext = React.createContext({\n  authenticated: false,\n  login: () => {}\n});\n\nexport default authContext;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport classes from './Person.module.css';\nimport withClass from '../../../hoc/withClass';\nimport Aux from '../../../hoc/Auxiliary';\nimport AuthContext from '../../../context/auth-context';\n\nclass Person extends Component {\n    // New version to use Refs\n    constructor(props) {\n        super(props);\n        this.inputElementRef = React.createRef();\n    }\n\n    static contextType = AuthContext;\n\n    componentDidMount() {\n        // Old version to use Refs\n        // this.inputElement.focus();\n\n        //New version to use Refs\n        this.inputElementRef.current.focus();\n\n        console.log('[Person.js] authenticated', this.context.authenticated);\n    }\n\n    render() {\n        console.log('[Person.js] rendering...');\n        // const rnd = Math.random();\n    \n        // if (rnd > 0.7) {\n        //     throw new Error('Something went wrong');\n        // }\n    \n        return (\n            <Aux>\n                {this.context.authenticated ? (\n                <p>Authenticated!</p>\n                ) : (\n                <p>Please log in</p>\n                )}\n                <p onClick={this.props.clicked}>I'm a {this.props.name} and I am {this.props.age} years old!</p>\n                <p>{this.props.children}</p>\n                <input \n                    type=\"text\" \n                    onChange={this.props.changed} \n                    value={this.props.name}\n                    // Old version to use Refs\n                    // ref={(inputEL) => {this.inputElement = inputEL}}\n\n                    //New version to use Refs\n                    ref={this.inputElementRef}\n                />\n            </Aux>\n        );\n    }\n}\n\nPerson.propTypes = {\n    name: PropTypes.string,\n    age: PropTypes.number,\n    clicked: PropTypes.func,\n    changed: PropTypes.func\n}\n\nexport default withClass(Person, classes.Person);\n","import React, {PureComponent} from 'react';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\nimport Person from '../Persons/Person/Person';\n\nclass Persons extends PureComponent {\n    // This isn't useful because this component does not have state\n\n    // static getDerivedStateFromProps(props, state) {\n    //     console.log('[Persons.js] getDerivedStateFromProps');\n    //     return state;\n    // }\n\n    // Instead of check all props you can use PureComponent. \n    // PureComponent already implements shouldComponentUpdate checking all props properties.\n\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     console.log('[Persons.js] shouldComponentUpdate');\n    //     return  this.props.persons !== nextProps.persons ||\n    //             this.props.clicked !== nextProps.clicked ||\n    //             this.props.changed !== nextProps.changed;\n    // }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        console.log('[Persons.js] getSnapshotBeforeUpdate');\n        return { message: 'Snapshot!' };\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.log('[Persons.js] componentDidUpdate');\n        console.log(snapshot);\n    }\n\n    render() {\n        console.log('[Persons.js] rendering...');\n        return (\n            this.props.persons.map((person, index) => {\n                return  <ErrorBoundary key = {person.id}>\n                            <Person \n                                name = {person.name}\n                                age = {person.age}\n                                clicked = {() => this.props.clicked(index)}\n                                changed = {(event) => this.props.changed(event, person.id)}/>\n                        </ErrorBoundary>\n            })\n        );\n    }\n}\n\nexport default Persons;\n","import React, { useEffect, useRef, useContext } from 'react';\n\nimport classes from './Cockpit.module.css';\nimport AuthContext from '../../context/auth-context';\n\nconst Cockpit = (props) => {\n    const toggleBtnRef = useRef(null);\n    const authContext = useContext(AuthContext);\n\n    console.log('[Cockpit.js] authenticated', authContext.authenticated);\n\n    useEffect(() => {\n        console.log('[Cockpit.js] useEffect');\n        // Http request...\n        // setTimeout(() => {\n        //     alert('Hello World!');\n        // }, 1000);\n        toggleBtnRef.current.click();\n        return () => {\n            console.log('[Cockpit.js] cleanup work in useEffect');\n        };\n    }, []);\n\n    useEffect(() => {\n        console.log('[Cockpit.js] 2nd useEffect');\n        return () => {\n            console.log('[Cockpit.js] cleanup work in 2nd useEffect');\n        };\n    });\n\n    // useEffect();\n\n    let buttonStyle = [classes.Button];\n\n    if (props.showPersons) {\n        buttonStyle.push(classes.Red);\n    }\n\n    const classesAssigned = [];\n\n    if (props.personsLength <= 1) {\n        classesAssigned.push(classes.red);\n    }\n\n    if (props.personsLength <= 0) {\n        classesAssigned.push(classes.bold);\n    }\n\n    return (\n        <div>\n            <h1>{props.title}</h1>\n            <p className={classesAssigned.join(\" \")}>Hello world</p>\n            <button\n                className={buttonStyle.join(\" \")}\n                onClick={props.toggled}\n                ref={toggleBtnRef}\n            >\n                Switch Name\n            </button>\n            <button \n                onClick={authContext.login}\n                className={classes.Button}\n            >\n                Log in\n            </button>\n        </div>\n    );\n};\n\nexport default React.memo(Cockpit);\n","import React, { Component } from 'react';\n\nimport classes from './App.module.css';\nimport Persons from '../components/Persons/Persons';\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport withClass from '../hoc/withClass';\nimport Aux from '../hoc/Auxiliary';\nimport AuthContext from '../context/auth-context';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    console.log('[App.js] constructor');\n  }\n\n  state = {\n    persons: [\n      {id: '1', name: 'User1', age: 21},\n      {id: '2', name: 'User2',  age: 23}\n    ],\n    otherProperty: 'Other property',\n    showPersons: false,\n    showCockpit: true,\n    changeCounter: 0,\n    authenticated: false\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    console.log('[App.js] getDerivedStateFromProps', props);\n    return state;\n  }\n\n  componentDidMount() {\n    console.log('[App.js] componentDidMount');\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[App.js] shouldComponentUpdate');\n    return true;\n  }\n\n  componentDidUpdate() {\n    console.log('[App.js] componentDidUpdate');\n  }\n\n\n  deletePersonHander = (indexPerson) => {\n    const persons = [...this.state.persons];\n    persons.splice(indexPerson, 1);\n    this.setState({persons: persons});\n  }\n\n  changedNameHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n\n    const person = {\n      ...this.state.persons[personIndex]\n    }\n\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n\n    persons[personIndex] = person;\n\n    this.setState((prevState, props) => {\n      return {\n        persons: persons,\n        changeCounter: prevState.changeCounter + 1\n      };\n    });\n  }\n\n  togglePersonsHandler = () => {\n    this.setState({showPersons: !this.state.showPersons});\n  }\n\n  loginHandler = () => {\n    this.setState({ authenticated: true });\n  };\n\n  render() {\n    console.log('[App.js] render');\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = <Persons\n                  persons={this.state.persons}\n                  clicked={this.deletePersonHander}\n                  changed={this.changedNameHandler}\n                />;\n    }\n\n    return (\n      <Aux>\n        <header className={classes.AppHeader}>\n          <button\n            onClick={() => {\n              this.setState({ showCockpit: false });\n            }}\n          >\n            Remove Cockpit\n          </button>\n          <AuthContext.Provider\n            value={{\n              authenticated: this.state.authenticated,\n              login: this.loginHandler\n            }}\n          >\n            {this.state.showCockpit ? (\n              <Cockpit\n                title={this.props.appTitle}\n                showPersons={this.state.showPersons}\n                personsLength={this.state.persons.length}\n                toggled={this.togglePersonsHandler}\n              />\n            ) : null}\n            {persons}\n          </AuthContext.Provider>\n        </header>\n      </Aux>\n    );\n  };\n}\n\nexport default withClass(App, classes.App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App appTitle=\"Person Manager\"/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}